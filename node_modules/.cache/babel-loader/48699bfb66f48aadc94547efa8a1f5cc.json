{"remainingRequest":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\WebstormProjects\\app\\src\\store\\home\\index.js","dependencies":[{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\src\\store\\home\\index.js","mtime":1647426141062},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\babel.config.js","mtime":1647243068386},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1647341553791}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Users/Administrator/WebstormProjects/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// home仓库\n//引入reqCategoryList方法并调用\nimport { reqCategoryList, reqGetBannerList, reqGetFloorList } from \"@/api\"; // 创建对象\n\nvar state = {\n  // state中的数据默认初始值很关键，不能乱写\n  // 若服务器返回的时对象，则初始值是对象\n  // 若服务器返回的是数组，则初始值是数组\n  categoryList: [],\n  // 轮播图的数组\n  bannerList: [],\n  // Floor的数组\n  floorList: []\n};\nvar mutations = {\n  // 修改仓库中过的数据唯一手段\n  // categoryList是服务器返回的数据\n  CATEGORYLIST: function CATEGORYLIST(state, categoryList) {\n    state.categoryList = categoryList;\n  },\n  GETBANNERLIST: function GETBANNERLIST(state, bannerList) {\n    state.bannerList = bannerList;\n  },\n  GETFLOORLIST: function GETFLOORLIST(state, floorList) {\n    state.floorList = floorList;\n  }\n};\nvar actions = {\n  // 通知API里面的接口函数调用，向服务器发送请求，获取服务器的数据\n  // async和await是同时存在的，返回成功的回调\n  categoryList: function () {\n    var _categoryList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return reqCategoryList();\n\n            case 3:\n              result = _context.sent;\n\n              // console.log(result);\n              if (result.code == 200) {\n                commit(\"CATEGORYLIST\", result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function categoryList(_x) {\n      return _categoryList.apply(this, arguments);\n    }\n\n    return categoryList;\n  }(),\n  // 获取首页轮播图的数据\n  getBannerList: function () {\n    var _getBannerList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2) {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return reqGetBannerList();\n\n            case 3:\n              result = _context2.sent;\n\n              // console.log(result);\n              if (result.code == 200) {\n                commit('GETBANNERLIST', result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function getBannerList(_x2) {\n      return _getBannerList.apply(this, arguments);\n    }\n\n    return getBannerList;\n  }(),\n  // 获取floor的数据\n  getFloorList: function () {\n    var _getFloorList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref3) {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              _context3.next = 3;\n              return reqGetFloorList();\n\n            case 3:\n              result = _context3.sent;\n\n              if (result.code == 200) {\n                commit('GETFLOORLIST', result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function getFloorList(_x3) {\n      return _getFloorList.apply(this, arguments);\n    }\n\n    return getFloorList;\n  }()\n}; // 计算属性\n\nvar getters = {}; // 对外暴露Store类的一个实例\n\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};",{"version":3,"sources":["C:/Users/Administrator/WebstormProjects/app/src/store/home/index.js"],"names":["reqCategoryList","reqGetBannerList","reqGetFloorList","state","categoryList","bannerList","floorList","mutations","CATEGORYLIST","GETBANNERLIST","GETFLOORLIST","actions","commit","result","code","data","getBannerList","getFloorList","getters"],"mappings":";;AAAA;AAEA;AACA,SAASA,eAAT,EAA0BC,gBAA1B,EAA4CC,eAA5C,QAAmE,OAAnE,C,CAGA;;AACA,IAAMC,KAAK,GAAG;AACV;AACA;AACA;AACAC,EAAAA,YAAY,EAAE,EAJJ;AAKV;AACAC,EAAAA,UAAU,EAAE,EANF;AAOV;AACAC,EAAAA,SAAS,EAAE;AARD,CAAd;AAUA,IAAMC,SAAS,GAAG;AACd;AACA;AACAC,EAAAA,YAHc,wBAGDL,KAHC,EAGMC,YAHN,EAGoB;AAC9BD,IAAAA,KAAK,CAACC,YAAN,GAAqBA,YAArB;AACH,GALa;AAMdK,EAAAA,aANc,yBAMAN,KANA,EAMOE,UANP,EAMmB;AAC7BF,IAAAA,KAAK,CAACE,UAAN,GAAmBA,UAAnB;AACH,GARa;AASdK,EAAAA,YATc,wBASDP,KATC,EASMG,SATN,EASiB;AAC3BH,IAAAA,KAAK,CAACG,SAAN,GAAkBA,SAAlB;AACH;AAXa,CAAlB;AAaA,IAAMK,OAAO,GAAG;AACZ;AAEA;AACMP,EAAAA,YAJM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAISQ,cAAAA,MAJT,QAISA,MAJT;AAAA;AAAA,qBAKWZ,eAAe,EAL1B;;AAAA;AAKJa,cAAAA,MALI;;AAMR;AACA,kBAAIA,MAAM,CAACC,IAAP,IAAe,GAAnB,EAAwB;AACpBF,gBAAAA,MAAM,CAAC,cAAD,EAAiBC,MAAM,CAACE,IAAxB,CAAN;AACH;;AATO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAYZ;AACMC,EAAAA,aAbM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaUJ,cAAAA,MAbV,SAaUA,MAbV;AAAA;AAAA,qBAcWX,gBAAgB,EAd3B;;AAAA;AAcJY,cAAAA,MAdI;;AAeR;AACA,kBAAIA,MAAM,CAACC,IAAP,IAAe,GAAnB,EAAwB;AACpBF,gBAAAA,MAAM,CAAC,eAAD,EAAkBC,MAAM,CAACE,IAAzB,CAAN;AACH;;AAlBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqBZ;AACME,EAAAA,YAtBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBSL,cAAAA,MAtBT,SAsBSA,MAtBT;AAAA;AAAA,qBAuBWV,eAAe,EAvB1B;;AAAA;AAuBJW,cAAAA,MAvBI;;AAwBR,kBAAIA,MAAM,CAACC,IAAP,IAAe,GAAnB,EAAwB;AACpBF,gBAAAA,MAAM,CAAC,cAAD,EAAiBC,MAAM,CAACE,IAAxB,CAAN;AACH;;AA1BO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAhB,C,CA8BA;;AACA,IAAMG,OAAO,GAAG,EAAhB,C,CAGA;;AACA,eAAgB;AACZf,EAAAA,KAAK,EAALA,KADY;AAEZI,EAAAA,SAAS,EAATA,SAFY;AAGZI,EAAAA,OAAO,EAAPA,OAHY;AAIZO,EAAAA,OAAO,EAAPA;AAJY,CAAhB","sourcesContent":["// home仓库\r\n\r\n//引入reqCategoryList方法并调用\r\nimport { reqCategoryList, reqGetBannerList, reqGetFloorList } from \"@/api\"\r\n\r\n\r\n// 创建对象\r\nconst state = {\r\n    // state中的数据默认初始值很关键，不能乱写\r\n    // 若服务器返回的时对象，则初始值是对象\r\n    // 若服务器返回的是数组，则初始值是数组\r\n    categoryList: [],\r\n    // 轮播图的数组\r\n    bannerList: [],\r\n    // Floor的数组\r\n    floorList: []\r\n};\r\nconst mutations = {\r\n    // 修改仓库中过的数据唯一手段\r\n    // categoryList是服务器返回的数据\r\n    CATEGORYLIST(state, categoryList) {\r\n        state.categoryList = categoryList;\r\n    },\r\n    GETBANNERLIST(state, bannerList) {\r\n        state.bannerList = bannerList\r\n    },\r\n    GETFLOORLIST(state, floorList) {\r\n        state.floorList = floorList\r\n    }\r\n};\r\nconst actions = {\r\n    // 通知API里面的接口函数调用，向服务器发送请求，获取服务器的数据\r\n\r\n    // async和await是同时存在的，返回成功的回调\r\n    async categoryList({ commit }) {\r\n        let result = await reqCategoryList();\r\n        // console.log(result);\r\n        if (result.code == 200) {\r\n            commit(\"CATEGORYLIST\", result.data)\r\n        }\r\n    },\r\n\r\n    // 获取首页轮播图的数据\r\n    async getBannerList({ commit }) {\r\n        let result = await reqGetBannerList();\r\n        // console.log(result);\r\n        if (result.code == 200) {\r\n            commit('GETBANNERLIST', result.data)\r\n        }\r\n    },\r\n\r\n    // 获取floor的数据\r\n    async getFloorList({ commit }) {\r\n        let result = await reqGetFloorList();\r\n        if (result.code == 200) {\r\n            commit('GETFLOORLIST', result.data)\r\n        }\r\n\r\n    }\r\n};\r\n// 计算属性\r\nconst getters = {};\r\n\r\n\r\n// 对外暴露Store类的一个实例\r\nexport default ({\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters\r\n})"]}]}