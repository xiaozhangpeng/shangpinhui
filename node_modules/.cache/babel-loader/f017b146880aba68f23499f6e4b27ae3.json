{"remainingRequest":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\WebstormProjects\\app\\src\\components\\TypeNav\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\src\\components\\TypeNav\\index.vue","mtime":1647520694799},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\babel.config.js","mtime":1648180147605},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1647341552492},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1647341553791},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1647341949719}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"C:/Users/Administrator/WebstormProjects/app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 在使用mapState之前，要导入这个辅助函数\nimport { mapState } from \"vuex\"; // 引入lodash中的throttle节流函数（按需引入）\n\nimport throttle from \"lodash/throttle\";\nexport default {\n  name: \"TypeNav\",\n  data: function data() {\n    return {\n      currentIndex: -1,\n      show: true\n    };\n  },\n  methods: {\n    // 鼠标略过TypeNav的时候，改变currentIndex的值\n    // changeIndex(index) {\n    //   this.currentIndex = index;\n    // },\n    // 利用节流，在时间间隔为50ms内不会再次请求服务器\n    changeIndex: throttle(function (index) {\n      this.currentIndex = index; // console.log(\"执行一次\");\n    }, 50),\n    // 鼠标移出的时候，调用函数\n    leaveIndex: function leaveIndex() {\n      this.currentIndex = -1;\n\n      if (this.$route.path != \"/home\") {\n        this.show = false;\n      }\n    },\n    // 划过的时候显示三级联动\n    enterShow: function enterShow() {\n      this.show = true;\n    },\n    // 进行路由跳转的方法\n    goSearch: function goSearch(event) {\n      var element = event.target; // console.log(element.dataset)\n\n      var _element$dataset = element.dataset,\n          categoryname = _element$dataset.categoryname,\n          category1id = _element$dataset.category1id,\n          category2id = _element$dataset.category2id,\n          category3id = _element$dataset.category3id;\n\n      if (categoryname) {\n        var location = {\n          name: \"Search\"\n        };\n        var query = {\n          categoryName: categoryname\n        };\n\n        if (category1id) {\n          query.category1Id = category1id;\n        } else if (category2id) {\n          query.category2Id = category2id;\n        } else {\n          query.category3Id = category3id;\n        } // 整理参数\n\n\n        console.log(location, query); // 路由跳转\n        // location.query = query;\n        // this.$router.push(location);\n        // 如果路由跳转的时候，带有params参数,捎带脚传递过去\n\n        if (this.$route.params) {\n          location.params = this.$route.params; // 动态给location配置对象添加query属性\n\n          location.query = query;\n          this.$router.push(location);\n        }\n      }\n    }\n  },\n  //生命周期函数mouunted（）\n  // 组件挂在完毕：可以向服务器发送请求\n  mounted: function mounted() {\n    // // 通知vuex发送请求，获取数据，存储与home仓库当中\n    // // 派发action\n    // this.$store.dispatch(\"categoryList\");\n    // 当组件挂在完毕后，如果不是Home路由组件，将TypeNav组件进行隐藏\n    if (this.$route.path != \"/home\") {\n      this.show = false;\n    }\n  },\n  computed: _objectSpread({}, mapState({\n    // 意思是将vuex中的数据映射到组件的computed属性中\n    // 右侧需要的是一个函数，当使用这个计算属性的时候，右侧的函数会立即执行一次\n    // 注入一个参数state，其实即为大仓库中的数据\n    categoryList: function categoryList(state) {\n      // console.log(state);\n      return state.home.categoryList;\n    }\n  }))\n};",null]}