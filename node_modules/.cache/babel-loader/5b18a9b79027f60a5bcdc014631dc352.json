{"remainingRequest":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\WebstormProjects\\app\\src\\pages\\Search\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\src\\pages\\Search\\index.vue","mtime":1647601167538},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\babel.config.js","mtime":1648180147605},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1647341552492},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1647341553791},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1647341949719}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.search\";\nimport _defineProperty from \"C:/Users/Administrator/WebstormProjects/app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es6.regexp.split\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SearchSelector from \"@/pages/Search/SearchSelector\"; // import { mapState } from \"vuex\";\n\nimport { mapGetters, mapState } from \"vuex\";\nexport default {\n  name: \"Search\",\n  data: function data() {\n    return {\n      searchParams: {\n        category1Id: \"\",\n        category2Id: \"\",\n        category3Id: \"\",\n        categoryName: \"\",\n        keyword: \"\",\n        // 排序,初始的状态应该是综合|降序\n        order: \"1:asc\",\n        pageNo: 1,\n        pageSize: 3,\n        props: [],\n        trademark: \"\"\n      }\n    };\n  },\n  components: {\n    SearchSelector: SearchSelector\n  },\n  methods: {\n    // 把这次请求封装为一个函数：当你需要在调用的时候，直接调用即可\n    getData: function getData() {\n      this.$store.dispatch(\"getSearchList\", this.searchParams);\n    },\n    // 移动分类名\n    removeCategoryName: function removeCategoryName() {\n      // 把带给服务器的参数置空了，还需要向服务器发请求\n      // 带给服务器参数说明可有可无的：如果属性值为空的字符串还是会把相应的字段带给服务器\n      // 但是你把相应的字段变为undefined:当前这个字段不会带给服务器\n      this.searchParams.categoryName = undefined;\n      this.searchParams.category1Id = undefined;\n      this.searchParams.category2Id = undefined;\n      this.searchParams.category3Id = undefined; // 再发一次数据请求\n\n      this.getData(); // 地址栏也需要修改：进行路由跳转\n      // this.$router.push({name:'Search'})\n      // 上面的不严谨，需要修改,需要保证删除的时候地址栏保留params\n\n      if (this.$route.params) {\n        this.$router.push({\n          name: \"Search\",\n          params: this.$route.params\n        });\n      }\n    },\n    // 移出关键词\n    removeKeyword: function removeKeyword() {\n      // 给服务器带的参数searchParams的keyword置空\n      this.searchParams.keyword = undefined; //  再次发请求\n\n      this.getData(); //  通知兄弟组件Header清楚关键字\n\n      this.$bus.$emit(\"clear\"); // 进行路由跳转\n\n      if (this.$route.query) {\n        this.$router.push({\n          name: \"Search\",\n          query: this.$route.query\n        });\n      }\n    },\n    // 自定义事件回调\n    trademarkInfo: function trademarkInfo(trademark) {\n      // 整理品牌字段的参数 \"ID:品牌名称\"\n      this.searchParams.trademark = \"\".concat(trademark.tmId, \":\").concat(trademark.tmName); // 再次发请求获取search模块列表数据进行展示\n\n      this.getData();\n    },\n    // 点击移出品牌事件\n    removeTrademark: function removeTrademark() {\n      this.searchParams.trademark = undefined;\n      this.getData();\n    },\n    // 自定义事件回调\n    attrInfo: function attrInfo(attr, attrvalue) {\n      // 整理参数:商品属性的数组: [\"属性ID:属性值:属性名\"] 示例: [\"2:6.0～6.24英寸:屏幕尺寸\"]\n      var props = \"\".concat(attr.attrId, \":\").concat(attrvalue, \":\").concat(attr.attrName); // 判断面包屑是否重复,\n\n      if (this.searchParams.props.indexOf(props) == -1) {\n        this.searchParams.props.push(props);\n      } // 重新请求数据\n\n\n      this.getData();\n    },\n    // 删除售卖属性\n    removeAttr: function removeAttr(index) {\n      // 再次整理参数\n      // console.log(index)\n      this.searchParams.props.splice(index, 1); // 再次发请求\n\n      this.getData();\n    },\n    // 排序的操作\n    changeOrder: function changeOrder(flag) {\n      //  flag形参:他是一个标记,代表用户点击的是综合(1),价格(2),传递进来的\n      var originOrder = this.searchParams.order;\n      console.log(originOrder); // 获取最开始的状态\n\n      var originFlag = this.searchParams.order.split(\":\")[0];\n      var originSort = this.searchParams.order.split(\":\")[1]; // 准备一个新的order属性值\n\n      var newOrder = \"\"; // 点击的是综合\n      // console.log(flag,originSort,originFlag);\n\n      if (flag == originFlag) {\n        newOrder = \"\".concat(originFlag, \":\").concat(originSort == \"desc\" ? \"asc\" : \"desc\");\n      } else {\n        // 点击的是价格\n        newOrder = \"\".concat(flag, \":\", \"desc\");\n      } // 将新的order赋予searchParams\n\n\n      this.searchParams.order = newOrder; // 再次发送请求\n\n      this.getData();\n    },\n    // 自定义事件回调函数---获取当前第几页\n    getPageNo: function getPageNo(pageNo) {\n      // 整理带给服务器的参数\n      this.searchParams.pageNo = pageNo; // 再次发送请求\n\n      this.getData();\n    }\n  },\n  // 当组件挂载完毕之前执行一次\n  beforeMount: function beforeMount() {\n    // Object.assign:ES6新语法，合并对象\n    Object.assign(this.searchParams, this.$route.query, this.$route.params);\n  },\n  mounted: function mounted() {\n    // 测试接口返回的数据格式\n    // this.$store.dispatch(\"getSearchList\", {});\n    this.getData();\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"goodsList\", \"attrsList\", \"trademarkList\"])), {}, {\n    // 判断order是否包含1\n    isOne: function isOne() {\n      return this.searchParams.order.indexOf(1) != -1;\n    },\n    // 判断order是否包含2\n    isTwo: function isTwo() {\n      return this.searchParams.order.indexOf(2) != -1;\n    },\n    // 判断oder是否包含asc\n    isAsc: function isAsc() {\n      return this.searchParams.order.indexOf(\"asc\") != -1;\n    },\n    // 判断order是否包含desc\n    isDesc: function isDesc() {\n      return this.searchParams.order.indexOf(\"desc\") != -1;\n    }\n  }, mapState({\n    total: function total(state) {\n      return state.search.searchList.total;\n    }\n  })),\n  // 数据监听：监听组件实例身上的属性的属性值拜变化\n  watch: {\n    // 监听路由的信息是否发生变化，如果发生变化，再次发送请求\n    $route: function $route(newValue, oldValue) {\n      // 再次发请求之前整理带给服务器参数\n      Object.assign(this.searchParams, this.$route.query, this.$route.params); // 再次发送ajax请求\n\n      this.getData(); // 每次请求完毕，应该把相应的1，2，3级分类的id置空，让他接受下一次相应的1，2，3id\n\n      this.searchParams.category1Id = undefined;\n      this.searchParams.category2Id = undefined;\n      this.searchParams.category3Id = undefined;\n    }\n  }\n};",null]}