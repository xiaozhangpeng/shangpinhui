{"remainingRequest":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\WebstormProjects\\app\\src\\components\\TypeNav\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\src\\components\\TypeNav\\index.vue","mtime":1647520694799},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\babel.config.js","mtime":1647243068386},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1647341553791},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1647341949719}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"C:/Users/Administrator/WebstormProjects/app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 在使用mapState之前，要导入这个辅助函数\nimport { mapState } from \"vuex\"; // 引入lodash中的throttle节流函数（按需引入）\n\nimport throttle from \"lodash/throttle\";\nexport default {\n  name: \"TypeNav\",\n  data: function data() {\n    return {\n      currentIndex: -1,\n      show: true\n    };\n  },\n  methods: {\n    // 鼠标略过TypeNav的时候，改变currentIndex的值\n    // changeIndex(index) {\n    //   this.currentIndex = index;\n    // },\n    // 利用节流，在时间间隔为50ms内不会再次请求服务器\n    changeIndex: throttle(function (index) {\n      this.currentIndex = index; // console.log(\"执行一次\");\n    }, 50),\n    // 鼠标移出的时候，调用函数\n    leaveIndex: function leaveIndex() {\n      this.currentIndex = -1;\n\n      if (this.$route.path != \"/home\") {\n        this.show = false;\n      }\n    },\n    // 划过的时候显示三级联动\n    enterShow: function enterShow() {\n      this.show = true;\n    },\n    // 进行路由跳转的方法\n    goSearch: function goSearch(event) {\n      var element = event.target; // console.log(element.dataset)\n\n      var _element$dataset = element.dataset,\n          categoryname = _element$dataset.categoryname,\n          category1id = _element$dataset.category1id,\n          category2id = _element$dataset.category2id,\n          category3id = _element$dataset.category3id;\n\n      if (categoryname) {\n        var location = {\n          name: \"Search\"\n        };\n        var query = {\n          categoryName: categoryname\n        };\n\n        if (category1id) {\n          query.category1Id = category1id;\n        } else if (category2id) {\n          query.category2Id = category2id;\n        } else {\n          query.category3Id = category3id;\n        } // 整理参数\n\n\n        console.log(location, query); // 路由跳转\n        // location.query = query;\n        // this.$router.push(location);\n        // 如果路由跳转的时候，带有params参数,捎带脚传递过去\n\n        if (this.$route.params) {\n          location.params = this.$route.params; // 动态给location配置对象添加query属性\n\n          location.query = query;\n          this.$router.push(location);\n        }\n      }\n    }\n  },\n  //生命周期函数mouunted（）\n  // 组件挂在完毕：可以向服务器发送请求\n  mounted: function mounted() {\n    // // 通知vuex发送请求，获取数据，存储与home仓库当中\n    // // 派发action\n    // this.$store.dispatch(\"categoryList\");\n    // 当组件挂在完毕后，如果不是Home路由组件，将TypeNav组件进行隐藏\n    if (this.$route.path != \"/home\") {\n      this.show = false;\n    }\n  },\n  computed: _objectSpread({}, mapState({\n    // 意思是将vuex中的数据映射到组件的computed属性中\n    // 右侧需要的是一个函数，当使用这个计算属性的时候，右侧的函数会立即执行一次\n    // 注入一个参数state，其实即为大仓库中的数据\n    categoryList: function categoryList(state) {\n      // console.log(state);\n      return state.home.categoryList;\n    }\n  }))\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;AACA,gC,CAEA;;AACA;AAEA;AACAA,iBADA;AAEAC,MAFA,kBAEA;AACA;AACAC,sBADA;AAEAC;AAFA;AAIA,GAPA;AAQAC;AACA;AACA;AACA;AACA;AAEA;AACAC;AACA,gCADA,CAEA;AACA,KAHA,EAGA,EAHA,CAPA;AAYA;AACAC,cAbA,wBAaA;AACA;;AACA;AACA;AACA;AACA,KAlBA;AAmBA;AACAC,aApBA,uBAoBA;AACA;AACA,KAtBA;AAuBA;AACAC,YAxBA,oBAwBAC,KAxBA,EAwBA;AACA,iCADA,CAEA;;AACA,6BACAC,eADA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AAAAV;AAAA;AACA;AAAAW;AAAA;;AACA;AACAC;AACA,SAFA,MAEA;AACAA;AACA,SAFA,MAEA;AACAA;AACA,SATA,CAUA;;;AACAC,qCAXA,CAaA;AACA;AACA;AAEA;;AACA,gCACA;AACAC,+CADA,CAEA;;AACAA;AACA;AACA;AACA;AACA;AAvDA,GARA;AAkEA;AACA;AACAC,SApEA,qBAoEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,GA7EA;AA8EAC,8BAEAC;AACA;AACA;AACA;AACAC;AACA;AACA;AACA;AAPA,IAFA;AA9EA","names":["name","data","currentIndex","show","methods","changeIndex","leaveIndex","enterShow","goSearch","event","element","categoryName","query","console","location","mounted","computed","mapState","categoryList"],"sourceRoot":"src/components/TypeNav","sources":["index.vue"],"sourcesContent":["<template>\n  <!-- 商品分类导航 -->\n  <div class=\"type-nav\">\n    <!-- <h1>{{categoryList}}</h1> -->\n    <div class=\"container\">\n      <!-- 将两者归为新的div目录下，新的div里面写入leaveIndex()方法 -->\n      <div @mouseleave=\"leaveIndex()\" @mouseenter=\"enterShow()\">\n        <h2 class=\"all\">全部商品分类</h2>\n        <transition name=\"sort\">\n          <div class=\"sort\" v-show=\"show\">\n            <!-- 一级目录 -->\n            <div class=\"all-sort-list2\" @click=\"goSearch\">\n              <div\n                class=\"item\"\n                v-for=\"(c1, index) in categoryList\"\n                :key=\"c1.categoryId\"\n                :class=\"{ cur: currentIndex == index }\"\n              >\n                <h3 @mouseenter=\"changeIndex(index)\">\n                  <!-- 自定义属性data-categoryName和data-category1Id data-category2Id data-category3Id-->\n                  <a\n                    :data-categoryName=\"c1.categoryName\"\n                    :data-category1Id=\"c1.categoryId\"\n                    >{{ c1.categoryName }}--{{ currentIndex }}</a\n                  >\n                </h3>\n                <!-- 二级目录 -->\n                <!-- 利用Js控制二三级目录的显示与隐藏 -->\n                <div\n                  class=\"item-list clearfix\"\n                  :style=\"{ display: currentIndex == index ? 'block' : 'none' }\"\n                >\n                  <div\n                    class=\"subitem\"\n                    v-for=\"(c2, index) in c1.categoryChild\"\n                    :key=\"c2.categoryId\"\n                  >\n                    <dl class=\"fore\">\n                      <dt>\n                        <a\n                          :data-categoryName=\"c2.categoryName\"\n                          :data-category2Id=\"c2.categoryId\"\n                          >{{ c2.categoryName }}</a\n                        >\n                      </dt>\n                      <!-- 三级目录 -->\n                      <dd>\n                        <em\n                          v-for=\"(c3, index) in c2.categoryChild\"\n                          :key=\"c3.categoryId\"\n                        >\n                          <a\n                            :data-categoryName=\"c3.categoryName\"\n                            :data-category3Id=\"c3.categoryId\"\n                            >{{ c3.categoryName }}</a\n                          >\n                        </em>\n                      </dd>\n                    </dl>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </transition>\n      </div>\n      <nav class=\"nav\">\n        <a href=\"###\">服装城</a>\n        <a href=\"###\">美妆馆</a>\n        <a href=\"###\">尚品汇超市</a>\n        <a href=\"###\">全球购</a>\n        <a href=\"###\">闪购</a>\n        <a href=\"###\">团购</a>\n        <a href=\"###\">有趣</a>\n        <a href=\"###\">秒杀</a>\n      </nav>\n    </div>\n  </div>\n</template>\n\n<script>\n// 在使用mapState之前，要导入这个辅助函数\nimport { mapState } from \"vuex\";\n\n// 引入lodash中的throttle节流函数（按需引入）\nimport throttle from \"lodash/throttle\";\n\nexport default {\n  name: \"TypeNav\",\n  data() {\n    return {\n      currentIndex: -1,\n      show: true,\n    };\n  },\n  methods: {\n    // 鼠标略过TypeNav的时候，改变currentIndex的值\n    // changeIndex(index) {\n    //   this.currentIndex = index;\n    // },\n\n    // 利用节流，在时间间隔为50ms内不会再次请求服务器\n    changeIndex: throttle(function (index) {\n      this.currentIndex = index;\n      // console.log(\"执行一次\");\n    }, 50),\n\n    // 鼠标移出的时候，调用函数\n    leaveIndex() {\n      this.currentIndex = -1;\n      if (this.$route.path != \"/home\") {\n        this.show = false;\n      }\n    },\n    // 划过的时候显示三级联动\n    enterShow() {\n      this.show = true;\n    },\n    // 进行路由跳转的方法\n    goSearch(event) {\n      let element = event.target;\n      // console.log(element.dataset)\n      let { categoryname, category1id, category2id, category3id } =\n        element.dataset;\n      if (categoryname) {\n        let location = { name: \"Search\" };\n        let query = { categoryName: categoryname };\n        if (category1id) {\n          query.category1Id = category1id;\n        } else if (category2id) {\n          query.category2Id = category2id;\n        } else {\n          query.category3Id = category3id;\n        }\n        // 整理参数\n        console.log(location, query);\n\n        // 路由跳转\n        // location.query = query;\n        // this.$router.push(location);\n\n        // 如果路由跳转的时候，带有params参数,捎带脚传递过去\n        if(this.$route.params)\n        {\n          location.params=this.$route.params;\n          // 动态给location配置对象添加query属性\n          location.query=query;\n          this.$router.push(location);\n        }\n      }\n    },\n  },\n\n  //生命周期函数mouunted（）\n  // 组件挂在完毕：可以向服务器发送请求\n  mounted() {\n    // // 通知vuex发送请求，获取数据，存储与home仓库当中\n    // // 派发action\n    // this.$store.dispatch(\"categoryList\");\n\n    // 当组件挂在完毕后，如果不是Home路由组件，将TypeNav组件进行隐藏\n    if (this.$route.path != \"/home\") {\n      this.show = false;\n    }\n  },\n  computed: {\n    // mapState是state的辅助函数，也可以说是state的语法糖\n    ...mapState({\n      // 意思是将vuex中的数据映射到组件的computed属性中\n      // 右侧需要的是一个函数，当使用这个计算属性的时候，右侧的函数会立即执行一次\n      // 注入一个参数state，其实即为大仓库中的数据\n      categoryList: (state) => {\n        // console.log(state);\n        return state.home.categoryList;\n      },\n    }),\n  },\n};\n</script>\n\n\n<style scoped lang=\"less\">\n.type-nav {\n  border-bottom: 2px solid #e1251b;\n\n  .container {\n    width: 1200px;\n    margin: 0 auto;\n    display: flex;\n    position: relative;\n\n    .all {\n      width: 210px;\n      height: 45px;\n      background-color: #e1251b;\n      line-height: 45px;\n      text-align: center;\n      color: #fff;\n      font-size: 14px;\n      font-weight: bold;\n    }\n\n    .nav {\n      a {\n        height: 45px;\n        margin: 0 22px;\n        line-height: 45px;\n        font-size: 16px;\n        color: #333;\n      }\n    }\n\n    .sort {\n      position: absolute;\n      left: 0;\n      top: 45px;\n      width: 210px;\n      height: 461px;\n      position: absolute;\n      background: #fafafa;\n      z-index: 999;\n\n      .all-sort-list2 {\n        .item {\n          h3 {\n            line-height: 30px;\n            font-size: 14px;\n            font-weight: 400;\n            overflow: hidden;\n            padding: 0 20px;\n            margin: 0;\n\n            a {\n              color: #333;\n            }\n          }\n\n          .item-list {\n            display: none;\n            position: absolute;\n            width: 734px;\n            min-height: 460px;\n            background: #f7f7f7;\n            left: 210px;\n            border: 1px solid #ddd;\n            top: 0;\n            z-index: 9999 !important;\n\n            .subitem {\n              float: left;\n              width: 650px;\n              padding: 0 4px 0 8px;\n\n              dl {\n                border-top: 1px solid #eee;\n                padding: 6px 0;\n                overflow: hidden;\n                zoom: 1;\n\n                &.fore {\n                  border-top: 0;\n                }\n\n                dt {\n                  float: left;\n                  width: 54px;\n                  line-height: 22px;\n                  text-align: right;\n                  padding: 3px 6px 0 0;\n                  font-weight: 700;\n                }\n\n                dd {\n                  float: left;\n                  width: 415px;\n                  padding: 3px 0 0;\n                  overflow: hidden;\n\n                  em {\n                    float: left;\n                    height: 14px;\n                    line-height: 14px;\n                    padding: 0 8px;\n                    margin-top: 5px;\n                    border-left: 1px solid #ccc;\n                  }\n                }\n              }\n            }\n          }\n\n          // &:hover {\n          //   .item-list {\n          //     display: block;\n          //   }\n          // }\n        }\n        // 利用JS手段cur来改变TypeNav背景颜色\n        .cur {\n          background: skyblue;\n        }\n        // .item:hover{\n        //   background:skyblue;\n        // }\n      }\n    }\n    // 鼠标进入过渡效果\n    .sort-enter {\n      height: 0px;\n    }\n    // 鼠标移出过渡效果\n    .sort-enter-to {\n      height: 501px;\n    }\n\n    .sort-enter-active {\n      transition: all 0.1s linear;\n    }\n  }\n}\n</style>"]}]}