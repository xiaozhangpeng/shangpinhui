{"remainingRequest":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\WebstormProjects\\app\\src\\router\\index.js","dependencies":[{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\src\\router\\index.js","mtime":1648192648360},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\babel.config.js","mtime":1648180147605},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1647341552492},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1647341553791}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Users/Administrator/WebstormProjects/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es6.regexp.replace\";\n//配置路由的地方\nimport Vue from 'vue';\nimport Router from 'vue-router';\nimport store from \"@/store\"; //使用插件\n\nVue.use(Router); // 引入路由组件\n\nimport routes from \"./routes\"; //重写push方法\n//解决当多次传参相同时，程序报错的问题\n//先把Router原型对象的push方法重写一遍\n\nvar originPush = Router.prototype.push;\nvar originReplace = Router.prototype.replace; //重写push/replace\n//第一个参数，告诉原来push方法，你往哪里跳转（传递那些参数）\n//第二个参数，resolve成功的回调\n//第三个参数，reject失败的回调\n\nRouter.prototype.push = function (location, resolve, reject) {\n  // 第一种情况：resolve成功回调和reject失败回调同时回传\n  // console.log(this)\n  if (resolve && reject) {\n    //call|apply区别\n    //相同点：都可以调用函数一次，都可以篡改函数的上下文一次\n    //不同点：call和apply传递参数，call传递参数用逗号隔开，apply方法执行，传递数组\n    originPush.call(this, location, resolve, reject);\n  } // 第二中情况：除第一种的所有其他情况\n  else {\n    originPush.call(this, location, function () {}, function () {});\n  }\n}; // 重写replace方法\n\n\nRouter.prototype.replace = function replace(location, resolve, reject) {\n  if (reject && resolve) {\n    return originReplace.call(this, location, resolve, reject);\n  } else {\n    return originReplace.call(this, location, function () {}, function () {});\n  }\n}; //配置路由\n\n\nvar router = new Router({\n  // mode:'history',\n  // 注册路由组件\n  routes: routes,\n  // 滚动行为\n  scrollBehavior: function scrollBehavior(to, from, savedPosition) {\n    // 返回的这个y=0，代表的滚动条在最上方\n    // y=100表示距离顶部有100px\n    return {\n      y: 0\n    };\n  }\n}); //全局守卫：前置守卫（在路由跳转之前进行判断，前置守卫用到的多一些）\n\nrouter.beforeEach( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(to, from, next) {\n    var token, name, toPath;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // 用户登陆了，才会有token\n            token = store.state.user.token; //用户信息\n\n            name = store.state.user.userInfo.name; // console.log(token);\n            // console.log(name)\n            // 用户已经登陆过了\n\n            if (!token) {\n              _context.next = 24;\n              break;\n            }\n\n            if (!(to.path == '/login' || to.path == '/register')) {\n              _context.next = 7;\n              break;\n            }\n\n            next('/');\n            _context.next = 22;\n            break;\n\n          case 7:\n            if (!name) {\n              _context.next = 11;\n              break;\n            }\n\n            // console.log(\"有name,正常放行\")\n            next();\n            _context.next = 22;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.next = 14;\n            return store.dispatch('getUserInfo');\n\n          case 14:\n            // console.log(\"没有name，请求数据\")\n            next();\n            _context.next = 22;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](11);\n            _context.next = 21;\n            return store.dispatch('userLogout');\n\n          case 21:\n            next('/login');\n\n          case 22:\n            _context.next = 27;\n            break;\n\n          case 24:\n            toPath = to.path; // 未登录，不能去交易相关[trade],不能去支付相关[pay/paysuccess],不能去个人中心[center]\n            // 未登录的只能去登录界面  indexOf('/trade')==-1的含义是不包含trade字段 而indexOf('/trade')!=-1含义是包含trade字段 --反反为正\n            // 使用indexOf可以一举两得,把包含目标字段的所有路由全部概括\n\n            if (to.path.indexOf('/trade') != -1 || to.path.indexOf('/pay') != -1 || to.path.indexOf('/center') != -1) {\n              next('/login?redirect=' + toPath); //解决的是:当用户未登录的情况下点击我的订单,在跳转登录页面并登录完成之后,可以直接跳转到我的订单页面,而不是首页\n            } // 去的不是上面这些路由(home|search|shopCart)--放行\n\n\n            next();\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[11, 17]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport default router;",null]}