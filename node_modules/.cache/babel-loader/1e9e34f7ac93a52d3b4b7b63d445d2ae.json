{"remainingRequest":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\WebstormProjects\\app\\src\\store\\shopcart\\index.js","dependencies":[{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\src\\store\\shopcart\\index.js","mtime":1647844049776},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\babel.config.js","mtime":1647243068386},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1647341553791}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Users/Administrator/WebstormProjects/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { reqCartList, reqDeleteCartById, reqUpdateCheckedById } from \"@/api\";\nvar state = {\n  cartList: []\n};\nvar mutations = {\n  GETCARTLIST: function GETCARTLIST(state, cartList) {\n    state.cartList = cartList;\n  }\n};\nvar actions = {\n  // 获取购物车列表数据\n  getCartList: function () {\n    var _getCartList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return reqCartList();\n\n            case 3:\n              result = _context.sent;\n\n              // console.log(result)\n              if (result.code == 200) {\n                commit('GETCARTLIST', result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function getCartList(_x) {\n      return _getCartList.apply(this, arguments);\n    }\n\n    return getCartList;\n  }(),\n  // 删除购物车某一个产品\n  deleteCartListBySkuId: function () {\n    var _deleteCartListBySkuId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2, skuId) {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return reqDeleteCartById(skuId);\n\n            case 3:\n              result = _context2.sent;\n\n              if (!(result.code == 200)) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", 'ok');\n\n            case 8:\n              return _context2.abrupt(\"return\", Promise.reject(new Error('faile')));\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function deleteCartListBySkuId(_x2, _x3) {\n      return _deleteCartListBySkuId.apply(this, arguments);\n    }\n\n    return deleteCartListBySkuId;\n  }(),\n  // 修改购物车某一产品的选中状态\n  updateCheckedById: function () {\n    var _updateCheckedById = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref3, _ref4) {\n      var commit, skuId, isChecked, result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              skuId = _ref4.skuId, isChecked = _ref4.isChecked;\n              _context3.next = 4;\n              return reqUpdateCheckedById(skuId, isChecked);\n\n            case 4:\n              result = _context3.sent;\n\n              if (!(result.code == 200)) {\n                _context3.next = 9;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", \"ok\");\n\n            case 9:\n              return _context3.abrupt(\"return\", Promise.reject(new Error('faile')));\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function updateCheckedById(_x4, _x5) {\n      return _updateCheckedById.apply(this, arguments);\n    }\n\n    return updateCheckedById;\n  }(),\n  // 删除全部勾选上的商品\n  deleteAllCheckedCart: function deleteAllCheckedCart(_ref5) {\n    var dispatch = _ref5.dispatch,\n        getters = _ref5.getters;\n    // context:小仓库  commit[提交mutations修改state] getters[计算属性] dispatch[派发action] state[当前仓库数据]\n    //  获取购物车中的全部产品(是一个数组)\n    var PromiseAll = [];\n    getters.cartList.cartInfoList.forEach(function (item) {\n      var promise = item.isChecked == 1 ? dispatch('deleteCartListBySkuId', item.skuId) : ''; //将每一次返回的Promise添加到数组当中\n\n      PromiseAll.push(promise);\n    }); // 只要全部的p1|p2。。。都成功，返回结果即为成功\n    // 如果有一个失败，返回即为失败\n\n    return Promise.all(PromiseAll);\n  },\n  // 修改全部产品的选中状态\n  updateAllCartChecked: function updateAllCartChecked(_ref6, isChecked) {\n    var dispatch = _ref6.dispatch,\n        state = _ref6.state;\n    // 数组\n    var promiseAll = [];\n    state.cartList[0].cartInfoList.forEach(function (item) {\n      var promise = dispatch('updateCheckedById', {\n        skuId: item.skuId,\n        isChecked: isChecked\n      });\n      promiseAll.push(promise);\n    }); // 最终返回结果\n\n    return Promise.all[promiseAll];\n  }\n}; // 简化数据\n\nvar getters = {\n  cartList: function cartList(state) {\n    return state.cartList[0] || {};\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};",{"version":3,"sources":["C:/Users/Administrator/WebstormProjects/app/src/store/shopcart/index.js"],"names":["reqCartList","reqDeleteCartById","reqUpdateCheckedById","state","cartList","mutations","GETCARTLIST","actions","getCartList","commit","result","code","data","deleteCartListBySkuId","skuId","Promise","reject","Error","updateCheckedById","isChecked","deleteAllCheckedCart","dispatch","getters","PromiseAll","cartInfoList","forEach","item","promise","push","all","updateAllCartChecked","promiseAll"],"mappings":"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","sourcesContent":["import { reqCartList, reqDeleteCartById, reqUpdateCheckedById } from \"@/api\"\r\n\r\nconst state = {\r\n    cartList: []\r\n}\r\nconst mutations = {\r\n\r\n    GETCARTLIST(state, cartList) {\r\n        state.cartList = cartList\r\n    }\r\n}\r\nconst actions = {\r\n        // 获取购物车列表数据\r\n        async getCartList({ commit }) {\r\n            let result = await reqCartList();\r\n            // console.log(result)\r\n            if (result.code == 200) {\r\n                commit('GETCARTLIST', result.data)\r\n            }\r\n        },\r\n        // 删除购物车某一个产品\r\n        async deleteCartListBySkuId({ commit }, skuId) {\r\n            let result = await reqDeleteCartById(skuId)\r\n            if (result.code == 200) {\r\n                return 'ok'\r\n            } else {\r\n                return Promise.reject(new Error('faile'))\r\n            }\r\n        },\r\n        // 修改购物车某一产品的选中状态\r\n        async updateCheckedById({ commit }, { skuId, isChecked }) {\r\n            let result = await reqUpdateCheckedById(skuId, isChecked)\r\n            if (result.code == 200) {\r\n                return \"ok\";\r\n            } else {\r\n                return Promise.reject(new Error('faile'))\r\n            }\r\n        },\r\n        // 删除全部勾选上的商品\r\n        deleteAllCheckedCart({ dispatch, getters }) {\r\n            // context:小仓库  commit[提交mutations修改state] getters[计算属性] dispatch[派发action] state[当前仓库数据]\r\n            //  获取购物车中的全部产品(是一个数组)\r\n            let PromiseAll = [];\r\n            getters.cartList.cartInfoList.forEach(item => {\r\n                let promise = item.isChecked == 1 ? dispatch('deleteCartListBySkuId', item.skuId) : '';\r\n                //将每一次返回的Promise添加到数组当中\r\n                PromiseAll.push(promise);\r\n            });\r\n            // 只要全部的p1|p2。。。都成功，返回结果即为成功\r\n            // 如果有一个失败，返回即为失败\r\n            return Promise.all(PromiseAll);\r\n\r\n        },\r\n        // 修改全部产品的选中状态\r\n        updateAllCartChecked({ dispatch, state }, isChecked) {\r\n            // 数组\r\n            let promiseAll = [];\r\n            state.cartList[0].cartInfoList.forEach(item => {\r\n                let promise = dispatch('updateCheckedById', { skuId: item.skuId, isChecked: isChecked });\r\n                promiseAll.push(promise);\r\n            });\r\n            // 最终返回结果\r\n            return Promise.all[promiseAll];\r\n\r\n        }\r\n\r\n\r\n    }\r\n    // 简化数据\r\nconst getters = {\r\n    cartList(state) {\r\n        return state.cartList[0] || {}\r\n    }\r\n}\r\n\r\nexport default {\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters\r\n}"]}]}