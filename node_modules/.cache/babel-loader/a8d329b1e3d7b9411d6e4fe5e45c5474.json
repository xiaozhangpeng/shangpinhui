{"remainingRequest":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\WebstormProjects\\app\\src\\pages\\Pay\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\src\\pages\\Pay\\index.vue","mtime":1648185311210},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\babel.config.js","mtime":1648180147605},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1647341552492},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1647341553791},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1647341949719}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Users/Administrator/WebstormProjects/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 引入QRCode--二维码解析\nimport QRCode from \"qrcode\";\nimport { done } from 'nprogress';\nexport default {\n  name: \"Pay\",\n  data: function data() {\n    return {\n      payInfo: {},\n      // 定时器\n      timer: null,\n      code: ''\n    };\n  },\n  computed: {\n    orderId: function orderId() {\n      return this.$route.query.orderId;\n    }\n  },\n  // 工作的时候尽量别再生命周期函数中async|await\n  mounted: function mounted() {\n    this.getPayInfo();\n  },\n  methods: {\n    // 在支付页面获取用户支付信息\n    getPayInfo: function () {\n      var _getPayInfo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var result;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.$API.reqPayInfo(this.orderId);\n\n              case 2:\n                result = _context.sent;\n                console.log(result);\n\n                if (result.code == 200) {\n                  this.payInfo = result.data;\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getPayInfo() {\n        return _getPayInfo.apply(this, arguments);\n      }\n\n      return getPayInfo;\n    }(),\n    //element-ui中的弹出事件\n    open: function () {\n      var _open = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _this = this;\n\n        var url;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return QRCode.toDataURL(this.payInfo.codeUrl);\n\n              case 2:\n                url = _context3.sent;\n                // 弹出对话框(注意img中的/要空一格)\n                this.$alert(\"<img src=\".concat(url, \" />\"), \"请你微信支付\", {\n                  //  是否将message属性作为HTML片段处理\n                  dangerouslyUseHTMLString: true,\n                  // 中间布局\n                  center: true,\n                  // 是否显示取消按钮\n                  showCancelButton: true,\n                  // 取消按钮的文本内容\n                  cancelButtonText: \"支付遇见问题\",\n                  // 确定按钮的文本内容\n                  confirmButtonText: \"已支付成功\",\n                  // 右上角的叉子没了\n                  showClose: false,\n                  // 关闭弹出框之前的配置值\n                  beforeClose: function beforeClose(type, instance, done) {\n                    // type:区分取消|确定按钮\n                    // instance:当前组件实例\n                    // done:关闭弹出框的方法\n                    if (type == 'cancel') {\n                      alert('请联系管理员处理'); // 清楚定时器\n\n                      clearInterval(_this.timer);\n                      _this.timer = null; // 关闭弹出框\n\n                      done();\n                    } else {\n                      // 判断是否真的支付了\n                      // 开发人员:为了自己方便,这里判断先不要了,直接判断\n                      // if(code==200)\n                      // {\n                      clearInterval(_this.timer);\n                      _this.timer = null;\n                      done();\n\n                      _this.$router.push('/paysuccess'); // }\n\n                    }\n                  }\n                }); // 你需要知道支付成功|失败\n                // 支付成功,路由的跳转,如果支付失败,提示信息\n                //定时器没有,开启一个新的定时器\n\n                if (!this.timer) {\n                  this.timer = setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n                    var result;\n                    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return _this.$API.reqPayStatus(_this.orderId);\n\n                          case 2:\n                            result = _context2.sent;\n                            console.log(result); // 支付成功后跳转\n\n                            if (result.code == 200) {\n                              // 第一步:清楚定时器\n                              clearInterval(_this.timer);\n                              _this.timer = null; // 第二部:保存支付成功后的code\n\n                              _this.code = result.code; // 第三步:关闭弹出框\n\n                              _this.$msgbox.close(); // 第四步:跳转到下一个路由(支付成功)\n\n\n                              _this.$router.push('/paysuccess');\n                            }\n\n                          case 5:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  })), 1000);\n                }\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function open() {\n        return _open.apply(this, arguments);\n      }\n\n      return open;\n    }()\n  }\n};",null]}