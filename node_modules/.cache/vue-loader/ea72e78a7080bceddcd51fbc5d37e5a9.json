{"remainingRequest":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\WebstormProjects\\app\\src\\pages\\ShopCart\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\src\\pages\\ShopCart\\index.vue","mtime":1648033242133},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1647341553791},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1647341949719}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters } from \"vuex\";\r\n// 引入节流函数throttle\r\nimport throttle from \"lodash/throttle\";\r\nexport default {\r\n  name: \"ShopCart\",\r\n  mounted() {\r\n    this.getData();\r\n  },\r\n  methods: {\r\n    // 获取个人购物车数据\r\n    getData() {\r\n      this.$store.dispatch(\"getCartList\");\r\n    },\r\n    // 修改某一产品的个数\r\n    // 节流：防止用户操作过快\r\n    handler: throttle(async function (type, disNum, cart) {\r\n      // type：为了区分这三个元素\r\n      // disNum形参：变化量（1）-变化量（-1） input中的最终个数，并不是变化量\r\n      // cart：点击哪一个产品\r\n      // console.log(type,disNum,cart);\r\n\r\n      // 向服务器发请求:\r\n      switch (type) {\r\n        // 加号\r\n        case \"add\":\r\n          // 带给服务器变化量\r\n          disNum = 1;\r\n          break;\r\n        case \"mins\":\r\n          // 判断产品的个数大于一,才可以传递给服务器-1\r\n          if (cart.skuNum > 1) disNum = -1;\r\n          // 产品的个数小于等于1\r\n          else disNum = 0;\r\n          break;\r\n        case \"change\":\r\n          // 用户输入进来最终量，非法的（带有汉字）,带给服务器数字\r\n          if (isNaN(disNum) || disNum < 1) {\r\n            disNum = 0;\r\n          } else {\r\n            disNum = parseInt(disNum) - cart.skuNum;\r\n          }\r\n      }\r\n      // 派发action\r\n      try {\r\n        // 代表的是修改成功\r\n        await this.$store.dispatch(\"addOrUpdateShopCart\", {\r\n          skuId: cart.skuId,\r\n          skuNum: disNum,\r\n        });\r\n        // 再一次获取服务器最新的数据进行展示\r\n        this.getData();\r\n      } catch (error) {}\r\n    }, 500),\r\n\r\n    // 删除某一个产品\r\n    async deleteCartById(cart) {\r\n      try {\r\n        // 如果删除成功，再次发请求获取数据\r\n        await this.$store.dispatch(\"deleteCartListBySkuId\", cart.skuId);\r\n        this.getData();\r\n      } catch (error) {\r\n        alert(error.message);\r\n      }\r\n    },\r\n\r\n    // 修改某个产品的勾选状态\r\n    async updateChecked(cart, event) {\r\n      try {\r\n        let checked = event.target.checked ? \"1\" : \"0\";\r\n        console.log(checked);\r\n        await this.$store.dispatch(\"updateCheckedById\", {\r\n          skuId: cart.skuId,\r\n          isChecked: checked,\r\n        });\r\n        this.getData();\r\n      } catch (error) {\r\n        // 如果失败了\r\n        alert(error.message);\r\n      }\r\n    },\r\n    // 删除全部选中的产品\r\n    async deleteAllCheckedCart() {\r\n      // 派发一个action\r\n\r\n      try {\r\n        await this.$store.dispatch(\"deleteAllCheckedCart\");\r\n        // 再次获取购物车列表\r\n        this.getData();\r\n      } catch (err) {\r\n        alert(err.message);\r\n      }\r\n    },\r\n    // 修改全部产品的选中在状态\r\n    async updateAllCartChecked(event) {\r\n      try {\r\n        this.getData();\r\n        // this.getData();\r\n        let isChecked = event.target.checked ? \"1\" : \"0\";\r\n        console.log(isChecked);\r\n        //  派发action\r\n        await this.$store.dispatch(\"updateAllCartChecked\", isChecked);\r\n        // 再次请求列表数据\r\n        this.getData();\r\n      } catch (error) {\r\n        alert(error.message);\r\n      }\r\n    },\r\n  },\r\n  computed: {\r\n    ...mapGetters([\"cartList\"]),\r\n    // 购物车数据\r\n    cartInfoList() {\r\n      return this.cartList.cartInfoList || [];\r\n    },\r\n    // 计算购买产品的总价\r\n    totoalPrice() {\r\n      let sum = 0;\r\n      this.cartInfoList.forEach((item) => {\r\n        sum += item.skuNum * item.skuPrice;\r\n      });\r\n      return sum;\r\n    },\r\n    // 全选(判断底部复选框是否勾选。全部产品都选中，才勾选)\r\n    // every类似于foreach都是遍历数组\r\n    isAllCheck() {\r\n      return this.cartInfoList.every((item) => item.isChecked == 1);\r\n    },\r\n  },\r\n};\r\n",null]}