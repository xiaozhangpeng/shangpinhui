{"remainingRequest":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\WebstormProjects\\app\\src\\components\\TypeNav\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\src\\components\\TypeNav\\index.vue","mtime":1647520694799},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1647341553791},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1647341949719}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// 在使用mapState之前，要导入这个辅助函数\nimport { mapState } from \"vuex\";\n\n// 引入lodash中的throttle节流函数（按需引入）\nimport throttle from \"lodash/throttle\";\n\nexport default {\n  name: \"TypeNav\",\n  data() {\n    return {\n      currentIndex: -1,\n      show: true,\n    };\n  },\n  methods: {\n    // 鼠标略过TypeNav的时候，改变currentIndex的值\n    // changeIndex(index) {\n    //   this.currentIndex = index;\n    // },\n\n    // 利用节流，在时间间隔为50ms内不会再次请求服务器\n    changeIndex: throttle(function (index) {\n      this.currentIndex = index;\n      // console.log(\"执行一次\");\n    }, 50),\n\n    // 鼠标移出的时候，调用函数\n    leaveIndex() {\n      this.currentIndex = -1;\n      if (this.$route.path != \"/home\") {\n        this.show = false;\n      }\n    },\n    // 划过的时候显示三级联动\n    enterShow() {\n      this.show = true;\n    },\n    // 进行路由跳转的方法\n    goSearch(event) {\n      let element = event.target;\n      // console.log(element.dataset)\n      let { categoryname, category1id, category2id, category3id } =\n        element.dataset;\n      if (categoryname) {\n        let location = { name: \"Search\" };\n        let query = { categoryName: categoryname };\n        if (category1id) {\n          query.category1Id = category1id;\n        } else if (category2id) {\n          query.category2Id = category2id;\n        } else {\n          query.category3Id = category3id;\n        }\n        // 整理参数\n        console.log(location, query);\n\n        // 路由跳转\n        // location.query = query;\n        // this.$router.push(location);\n\n        // 如果路由跳转的时候，带有params参数,捎带脚传递过去\n        if(this.$route.params)\n        {\n          location.params=this.$route.params;\n          // 动态给location配置对象添加query属性\n          location.query=query;\n          this.$router.push(location);\n        }\n      }\n    },\n  },\n\n  //生命周期函数mouunted（）\n  // 组件挂在完毕：可以向服务器发送请求\n  mounted() {\n    // // 通知vuex发送请求，获取数据，存储与home仓库当中\n    // // 派发action\n    // this.$store.dispatch(\"categoryList\");\n\n    // 当组件挂在完毕后，如果不是Home路由组件，将TypeNav组件进行隐藏\n    if (this.$route.path != \"/home\") {\n      this.show = false;\n    }\n  },\n  computed: {\n    // mapState是state的辅助函数，也可以说是state的语法糖\n    ...mapState({\n      // 意思是将vuex中的数据映射到组件的computed属性中\n      // 右侧需要的是一个函数，当使用这个计算属性的时候，右侧的函数会立即执行一次\n      // 注入一个参数state，其实即为大仓库中的数据\n      categoryList: (state) => {\n        // console.log(state);\n        return state.home.categoryList;\n      },\n    }),\n  },\n};\n",null]}