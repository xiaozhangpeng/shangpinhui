{"remainingRequest":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\WebstormProjects\\app\\src\\pages\\Search\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\src\\pages\\Search\\index.vue","mtime":1647601167538},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1647341553791},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647341553526},{"path":"C:\\Users\\Administrator\\WebstormProjects\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1647341949719}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SearchSelector from \"@/pages/Search/SearchSelector\";\n// import { mapState } from \"vuex\";\nimport { mapGetters, mapState } from \"vuex\";\nexport default {\n  name: \"Search\",\n  data() {\n    return {\n      searchParams: {\n        category1Id: \"\",\n        category2Id: \"\",\n        category3Id: \"\",\n        categoryName: \"\",\n        keyword: \"\",\n        // 排序,初始的状态应该是综合|降序\n        order: \"1:asc\",\n        pageNo: 1,\n        pageSize: 3,\n        props: [],\n        trademark: \"\",\n      },\n    };\n  },\n  components: {\n    SearchSelector,\n  },\n  methods: {\n    // 把这次请求封装为一个函数：当你需要在调用的时候，直接调用即可\n    getData() {\n      this.$store.dispatch(\"getSearchList\", this.searchParams);\n    },\n    // 移动分类名\n    removeCategoryName() {\n      // 把带给服务器的参数置空了，还需要向服务器发请求\n      // 带给服务器参数说明可有可无的：如果属性值为空的字符串还是会把相应的字段带给服务器\n      // 但是你把相应的字段变为undefined:当前这个字段不会带给服务器\n      this.searchParams.categoryName = undefined;\n      this.searchParams.category1Id = undefined;\n      this.searchParams.category2Id = undefined;\n      this.searchParams.category3Id = undefined;\n      // 再发一次数据请求\n      this.getData();\n      // 地址栏也需要修改：进行路由跳转\n      // this.$router.push({name:'Search'})\n\n      // 上面的不严谨，需要修改,需要保证删除的时候地址栏保留params\n      if (this.$route.params) {\n        this.$router.push({ name: \"Search\", params: this.$route.params });\n      }\n    },\n    // 移出关键词\n    removeKeyword() {\n      // 给服务器带的参数searchParams的keyword置空\n      this.searchParams.keyword = undefined;\n      //  再次发请求\n      this.getData();\n      //  通知兄弟组件Header清楚关键字\n      this.$bus.$emit(\"clear\");\n      // 进行路由跳转\n      if (this.$route.query) {\n        this.$router.push({ name: \"Search\", query: this.$route.query });\n      }\n    },\n    // 自定义事件回调\n    trademarkInfo(trademark) {\n      // 整理品牌字段的参数 \"ID:品牌名称\"\n      this.searchParams.trademark = `${trademark.tmId}:${trademark.tmName}`;\n      // 再次发请求获取search模块列表数据进行展示\n      this.getData();\n    },\n    // 点击移出品牌事件\n    removeTrademark() {\n      this.searchParams.trademark = undefined;\n      this.getData();\n    },\n    // 自定义事件回调\n    attrInfo(attr, attrvalue) {\n      // 整理参数:商品属性的数组: [\"属性ID:属性值:属性名\"] 示例: [\"2:6.0～6.24英寸:屏幕尺寸\"]\n      let props = `${attr.attrId}:${attrvalue}:${attr.attrName}`;\n\n      // 判断面包屑是否重复,\n      if (this.searchParams.props.indexOf(props) == -1) {\n        this.searchParams.props.push(props);\n      }\n      // 重新请求数据\n      this.getData();\n    },\n    // 删除售卖属性\n    removeAttr(index) {\n      // 再次整理参数\n      // console.log(index)\n      this.searchParams.props.splice(index, 1);\n      // 再次发请求\n      this.getData();\n    },\n    // 排序的操作\n    changeOrder(flag) {\n      //  flag形参:他是一个标记,代表用户点击的是综合(1),价格(2),传递进来的\n      let originOrder = this.searchParams.order;\n      console.log(originOrder);\n      // 获取最开始的状态\n      let originFlag = this.searchParams.order.split(\":\")[0];\n      let originSort = this.searchParams.order.split(\":\")[1];\n      // 准备一个新的order属性值\n      let newOrder = \"\";\n      // 点击的是综合\n      // console.log(flag,originSort,originFlag);\n      if (flag == originFlag) {\n        newOrder = `${originFlag}:${originSort == \"desc\" ? \"asc\" : \"desc\"}`;\n      } else {\n        // 点击的是价格\n        newOrder = `${flag}:${\"desc\"}`;\n      }\n      // 将新的order赋予searchParams\n      this.searchParams.order = newOrder;\n      // 再次发送请求\n      this.getData();\n    },\n    // 自定义事件回调函数---获取当前第几页\n    getPageNo(pageNo) {\n      // 整理带给服务器的参数\n      this.searchParams.pageNo = pageNo;\n      // 再次发送请求\n      this.getData();\n    },\n  },\n  // 当组件挂载完毕之前执行一次\n  beforeMount() {\n    // Object.assign:ES6新语法，合并对象\n    Object.assign(this.searchParams, this.$route.query, this.$route.params);\n  },\n\n  mounted() {\n    // 测试接口返回的数据格式\n    // this.$store.dispatch(\"getSearchList\", {});\n    this.getData();\n  },\n  computed: {\n    // ...mapState({\n    //   goodsList:state=>state.search.searchList.goodsList\n    // }),\n    // 辅助函数--mapGetters\n    ...mapGetters([\"goodsList\", \"attrsList\", \"trademarkList\"]),\n    // 判断order是否包含1\n    isOne() {\n      return this.searchParams.order.indexOf(1) != -1;\n    },\n    // 判断order是否包含2\n    isTwo() {\n      return this.searchParams.order.indexOf(2) != -1;\n    },\n    // 判断oder是否包含asc\n    isAsc() {\n      return this.searchParams.order.indexOf(\"asc\") != -1;\n    },\n    // 判断order是否包含desc\n    isDesc() {\n      return this.searchParams.order.indexOf(\"desc\") != -1;\n    },\n    // 获取search模块展示产品一共多少数据\n    ...mapState({\n      total: (state) => state.search.searchList.total,\n    }),\n  },\n  // 数据监听：监听组件实例身上的属性的属性值拜变化\n  watch: {\n    // 监听路由的信息是否发生变化，如果发生变化，再次发送请求\n    $route(newValue, oldValue) {\n      // 再次发请求之前整理带给服务器参数\n      Object.assign(this.searchParams, this.$route.query, this.$route.params);\n      // 再次发送ajax请求\n      this.getData();\n      // 每次请求完毕，应该把相应的1，2，3级分类的id置空，让他接受下一次相应的1，2，3id\n      this.searchParams.category1Id = undefined;\n      this.searchParams.category2Id = undefined;\n      this.searchParams.category3Id = undefined;\n    },\n  },\n};\n",null]}